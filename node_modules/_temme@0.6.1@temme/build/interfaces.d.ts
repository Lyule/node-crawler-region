export interface Dict<V> {
    [key: string]: V;
}
export declare type Literal = string | number | boolean | null | RegExp;
export interface Capture {
    name: string;
    filterList: Filter[];
}
export interface Filter {
    isArrayFilter: boolean;
    name: string;
    args: Literal[];
}
export declare type TemmeSelector = SelfSelector | NormalSelector | Assignment | SnippetDefine | SnippetExpand | FilterDefine;
export declare type ExpandedTemmeSelector = SelfSelector | NormalSelector | Assignment | SnippetDefine | FilterDefine;
export interface NormalSelector {
    type: 'normal-selector';
    sections: Section[];
    content: ContentPart[];
    arrayCapture: Capture;
    children: TemmeSelector[];
}
export interface SelfSelector {
    type: 'self-selector';
    section: Section;
    content: ContentPart[];
}
export interface Assignment {
    type: 'assignment';
    capture: Capture;
    value: Literal;
}
export interface SnippetDefine {
    type: 'snippet-define';
    name: string;
    selectors: TemmeSelector[];
}
export interface SnippetExpand {
    type: 'snippet-expand';
    name: string;
}
export interface FilterDefine {
    type: 'filter-define';
    name: string;
    argNames: string;
    code: string;
}
export interface Section {
    combinator: Combinator;
    element: string;
    qualifiers: Qualifier[];
}
export declare type Combinator = ' ' | '>' | '+' | '~';
export declare type Qualifier = IdQualifier | ClassQualifier | AttributeQualifier | PseudoQualifier;
export interface IdQualifier {
    type: 'id-qualifier';
    id: string;
}
export interface ClassQualifier {
    type: 'class-qualifier';
    className: string;
}
export declare type AttributeOperator = '=' | '~=' | '|=' | '*=' | '^=' | '$=';
export interface AttributeQualifier {
    type: 'attribute-qualifier';
    attribute: string;
    operator: AttributeOperator;
    value: string | Capture;
}
export interface PseudoQualifier {
    type: 'pseudo-qualifier';
    name: string;
    content: string;
}
export declare type ContentPart = ContentPartCapture | Assignment | ContentPartCall;
export interface ContentPartCapture {
    type: 'capture';
    capture: Capture;
}
export interface ContentPartCall {
    type: 'call';
    funcName: string;
    args: (Literal | Capture)[];
}
export declare const DummyValue325353 = "242gascdfe";
